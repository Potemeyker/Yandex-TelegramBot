import json
import logging

from telegram._files import voice

from database import add_user, find_user, search_film

from telegram import ReplyKeyboardMarkup, InputFile, InlineKeyboardButton, InlineKeyboardMarkup, InputMedia
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler
from telegram.constants import ParseMode

BOT_TOKEN = "6471385855:AAEE0HX4cAbt8GJ15ZsxD35Mw5cc643UCBU"

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

NEW_SEARCH, SEARCH, INSTRUCTION, SHOW, VOICES, QUALITY, NONE, SERIES = map(str, range(8))


async def start(update, context):
    keyboard = [
        [InlineKeyboardButton("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=INSTRUCTION)],
    ]

    user_id = update.message.from_user.id

    if find_user(user_id) is None:
        add_user(user_id)

    await update.message.reply_text(
        "üçø –ü—Ä–∏–≤–µ—Ç, –∫–∏–Ω–æ–º–∞–Ω!\n\n"
        "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ\n\n"
        "<i>–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - —á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard))


async def new_search(update, context):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=INSTRUCTION)],
    ]

    await query.delete_message()
    await query.message.reply_text(
        "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ\n\n"
        "<i>–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - —á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard))


async def search(update, context):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=INSTRUCTION)],
    ]

    await query.edit_message_text(
        "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ\n\n"
        "<i>–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - —á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard))


async def instruction(update, context):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=SEARCH)],
    ]

    await query.edit_message_text("–ß–¢–û –ü–û–ó–í–û–õ–Ø–ï–¢ –î–ï–õ–ê–¢–¨ –ë–û–¢?\n\n"
                                  "–° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª, —Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ, –¥–æ–±–∞–≤–ª—è—Ç—å –≤"
                                  "–∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —Å–∫–∞—á–∏–≤–∞—Ç—å –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ñ–ª–∞–π–Ω!\n\n\n"
                                  "–ö–ê–ö –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø –ë–û–¢–û–ú?\n\n"
                                  "üîç –û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ –∏ –±–æ—Ç –≤—ã–¥–∞—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞, –ø—Ä–∏–º–µ—Ä—ã:\n"
                                  "‚úÖ –±–µ—Å—Å—Ç—ã–∂–∏–µ\n"
                                  "‚úÖ –¥–æ–≤–æ–¥",
                                  reply_markup=InlineKeyboardMarkup(keyboard))


async def reply(update, context):
    response = update.message.text

    movie = search_film(response)
    if movie:
        with open(f"data/{movie.id}.json", "r", encoding="utf-8") as file:
            movie_json = json.load(file)

        voice = "–†—É—Å—Å–∫–∏–π"
        quality = "480"

        context.user_data["voice"] = voice
        context.user_data["quality"] = quality
        context.user_data["movie_json"] = movie_json

        if movie_json["type"] == 0:
            keyboard = [
                [
                    InlineKeyboardButton("üîä –û–∑–≤—É—á–∫–∞", callback_data=VOICES),
                    InlineKeyboardButton("üîÆ –ö–∞—á–µ—Å—Ç–≤–æ", callback_data=QUALITY)
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=NEW_SEARCH)]
            ]

            movie_url = movie_json["videos"][voice][quality]
            caption = (f"{movie_json["name"]} ({voice} | {quality}p)\n\n"
                       f"by @YandexKinoBot")
        else:
            keyboard = [
                [
                    InlineKeyboardButton("‚úñÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=NONE),
                    InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"{SHOW} series 1e2")
                ],
                [InlineKeyboardButton("üî¢ –í—ã–±–æ—Ä —Å–µ—Ä–∏–∏", callback_data=f"{SERIES} voice")],
                [
                    InlineKeyboardButton("üîä –û–∑–≤—É—á–∫–∞", callback_data=VOICES),
                    InlineKeyboardButton("üîÆ –ö–∞—á–µ—Å—Ç–≤–æ", callback_data=QUALITY)
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=SEARCH)]
            ]

            series = "1e1"
            context.user_data["series"] = series

            movie_url = movie_json["videos"][series][voice][quality]
            caption = (f"{movie_json["name"]} ({voice} | {quality}p)\n" +
                       "—Å–µ–∑–æ–Ω {} —Å–µ—Ä–∏—è {}\n\n".format(*series.split('e')) +
                       f"by @YandexKinoBot")

        await update.message.reply_video(
            movie_url,
            caption=caption,
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    else:
        keyboard = [
            [InlineKeyboardButton("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=INSTRUCTION)],
        ]

        await update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
                                        "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∏–Ω–æ\n\n"
                                        "<i>–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - —á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</i>",
                                        parse_mode=ParseMode.HTML,
                                        reply_markup=InlineKeyboardMarkup(keyboard))


async def show_movie(update, context):
    query = update.callback_query
    await query.answer()

    try:
        _, name, data = query.data.split()
        context.user_data[name] = data
    except ValueError:
        pass

    voice = context.user_data["voice"]
    quality = context.user_data["quality"]
    movie_json = context.user_data["movie_json"]

    if movie_json["type"] == 0:
        keyboard = [
            [
                InlineKeyboardButton("üîä –û–∑–≤—É—á–∫–∞", callback_data=VOICES),
                InlineKeyboardButton("üîÆ –ö–∞—á–µ—Å—Ç–≤–æ", callback_data=QUALITY)
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=NEW_SEARCH)]
        ]

        try:
            media_type = "video"
            movie_url = movie_json["videos"][voice][quality]
            caption = (f"{movie_json["name"]} ({voice} | {quality}p)\n\n"
                       f"by @YandexKinoBot")
        except KeyError:
            media_type = "photo"
            movie_url = movie_json["poster"]
            caption = (f"{movie_json["name"]} ({voice} | {quality}p)\n\n"
                       f"‚ö†Ô∏è –í–∏–¥–µ–æ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ –æ–∑–≤—É—á–∫–∞ —Å–µ—Ä–∏–∏ –µ—â–µ –Ω–µ –≤—ã—à–ª–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é\n\n"
                       f"by @YandexKinoBot")
    else:
        series = context.user_data["series"]
        all_series: list[str] = movie_json["all_series"]

        if all_series.index(series) == 0:
            previous = InlineKeyboardButton("‚úñÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=NONE)
        else:
            previous = InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                                            callback_data=f"{SHOW} series {all_series[all_series.index(series) - 1]}")

        if all_series.index(series) == len(all_series) - 1:
            next = InlineKeyboardButton("‚úñÔ∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=NONE)
        else:
            next = InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
                                        callback_data=f"{SHOW} series {all_series[all_series.index(series) + 1]}")

        keyboard = [
            [previous, next],
            [InlineKeyboardButton("üî¢ –í—ã–±–æ—Ä —Å–µ—Ä–∏–∏", callback_data=f"{SERIES} voice")],
            [
                InlineKeyboardButton("üîä –û–∑–≤—É—á–∫–∞", callback_data=VOICES),
                InlineKeyboardButton("üîÆ –ö–∞—á–µ—Å—Ç–≤–æ", callback_data=QUALITY)
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=NEW_SEARCH)]
        ]

        try:
            media_type = "video"
            movie_url = movie_json["videos"][series][voice][quality]
            caption = (f"{movie_json["name"]} ({voice} | {quality}p)\n" +
                       "—Å–µ–∑–æ–Ω {} —Å–µ—Ä–∏—è {}\n\n".format(*series.split('e')) +
                       f"by @YandexKinoBot")
        except KeyError:
            media_type = "photo"
            movie_url = movie_json["poster"]
            caption = (f"{movie_json["name"]} ({voice} | {quality}p)\n" +
                       "—Å–µ–∑–æ–Ω {} —Å–µ—Ä–∏—è {}\n\n".format(*series.split('e')) +
                       f"‚ö†Ô∏è –í–∏–¥–µ–æ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ –æ–∑–≤—É—á–∫–∞ —Å–µ—Ä–∏–∏ –µ—â–µ –Ω–µ –≤—ã—à–ª–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é\n\n"
                       f"by @YandexKinoBot")

    await query.edit_message_media(InputMedia(media_type, movie_url))
    await query.edit_message_caption(caption)
    await query.edit_message_reply_markup(InlineKeyboardMarkup(keyboard))


async def change_voices(update, context):
    query = update.callback_query
    await query.answer()

    json_data = context.user_data["movie_json"]

    if json_data["type"] == 0:
        voices = list(json_data["videos"].keys())
    else:
        series = context.user_data["series"]
        voices = list(json_data["videos"][series].keys())

    keyboard = [[InlineKeyboardButton(voice, callback_data=f"{SHOW} voice {voice}")] for voice in voices]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=SHOW)])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(keyboard))


async def change_quality(update, context):
    query = update.callback_query
    await query.answer()

    voice = context.user_data["voice"]
    json_data = context.user_data["movie_json"]

    if json_data["type"] == 0:
        qualities = list(json_data["videos"][voice].keys())
    else:
        series = context.user_data["series"]
        qualities = list(json_data["videos"][series][voice].keys())

    keyboard = [[InlineKeyboardButton(quality, callback_data=f"{SHOW} quality {quality}")] for quality in qualities]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=SHOW)])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(keyboard))


async def change_series(update, context):
    query = update.callback_query
    await query.answer()

    _, data = query.data.split()

    if data == "voice":
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–µ—Ä–∏–∏ –æ–∑–≤—É—á–∫–∏", callback_data=f"{SERIES} voice"),
             InlineKeyboardButton("üî≤ –í—Å–µ —Å–µ—Ä–∏–∏", callback_data=f"{SERIES} all")],
        ]

        series = [
            episode for episode in context.user_data["movie_json"]["all_series"]
            if context.user_data["voice"] in list(context.user_data["movie_json"]["videos"][episode].keys())
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üî≤ –°–µ—Ä–∏–∏ –æ–∑–≤—É—á–∫–∏", callback_data=f"{SERIES} voice"),
             InlineKeyboardButton("‚úÖ –í—Å–µ —Å–µ—Ä–∏–∏", callback_data=f"{SERIES} all")],
        ]

        series = context.user_data["movie_json"]["all_series"]

    series = list(map(lambda episode: InlineKeyboardButton(episode, callback_data=f"{SHOW} series {episode}"), series))
    if len(series) < len(context.user_data["movie_json"]["all_series"]):
        series.append(InlineKeyboardButton("üî¢‚û°Ô∏è", callback_data=f"{SERIES} all"))

    keyboard.extend([series[i:i + 4] for i in range(0, len(series), 4)])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=SHOW)])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(keyboard))


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply))
    application.add_handler(CallbackQueryHandler(search, pattern=f"^{SEARCH}$"))
    application.add_handler(CallbackQueryHandler(new_search, pattern=f"^{NEW_SEARCH}$"))
    application.add_handler(CallbackQueryHandler(instruction, pattern=f"^{INSTRUCTION}$"))
    application.add_handler(CallbackQueryHandler(show_movie, pattern=f"^{SHOW}.*$"))
    application.add_handler(CallbackQueryHandler(change_voices, pattern=f"^{VOICES}$"))
    application.add_handler(CallbackQueryHandler(change_quality, pattern=f"^{QUALITY}$"))
    application.add_handler(CallbackQueryHandler(change_series, pattern=f"^{SERIES}.*$"))

    application.run_polling()


if __name__ == '__main__':
    main()
